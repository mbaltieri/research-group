---
import { getCollection } from 'astro:content';
import PageLayout from '~/layouts/PageLayout.astro';

const pubs = await getCollection('publications');

// Helpers
const toTime = (s?: string) => {
  const t = s ? new Date(s).getTime() : 0;
  return Number.isNaN(t) ? 0 : t;
};
const toYear = (y: unknown) =>
  typeof y === 'number' ? y : parseInt(String(y ?? '0'), 10) || 0;

function authorLine(authors: string[] = []) {
  return authors.join(', ');
}

function doiUrl(doi?: string) {
  if (!doi) return null;
  return /^https?:\/\//i.test(doi) ? doi : `https://doi.org/${doi}`;
}
function arxivUrl(id?: string) {
  if (!id) return null;
  return /^https?:\/\//i.test(id) ? id : `https://arxiv.org/abs/${id}`;
}

// Group by numeric year
const byYear = new Map<number, typeof pubs>();
for (const p of pubs) {
  const y = toYear(p.data.year);
  if (!byYear.has(y)) byYear.set(y, []);
  byYear.get(y)!.push(p);
}

// Sort each year's items by last added (newest first)
for (const list of byYear.values()) {
  list.sort((a, b) => toTime(b.data.addedAt) - toTime(a.data.addedAt));
}

// Order years by the most recent addedAt within the year (newest first)
// Fallback to the numeric year if needed
const years = Array.from(byYear.keys()).sort((ya, yb) => {
  const la = Math.max(...byYear.get(ya)!.map(e => toTime(e.data.addedAt)), 0);
  const lb = Math.max(...byYear.get(yb)!.map(e => toTime(e.data.addedAt)), 0);
  if (lb !== la) return lb - la;
  return yb - ya; // fallback: newer calendar year first
});
---

<PageLayout title="Publications">
  <section class="mx-auto max-w-7xl px-6 py-16">
    <h1 class="text-4xl font-bold tracking-tight mb-6">Publications (Last added)</h1>

    <!-- Year quick-jump -->
    <nav class="mb-10 flex flex-wrap gap-3 text-sm opacity-90">
      {years.map((y) => (
        <a href={`#y-${y}`} class="rounded-full border px-3 py-1 hover:bg-white/10">{y}</a>
      ))}
    </nav>

    {years.map((y, idx) => (
      <section id={`y-${y}`} class={idx > 0 ? 'pt-12 mt-12 border-t border-white/10' : ''}>
        <h2 class="text-2xl font-semibold tracking-tight mb-6">{y}</h2>

        <ul class="space-y-6">
          {byYear.get(y)!.map(({ data }) => {
            const links = {
              doi: doiUrl(data.doi),
              arxiv: arxivUrl(data.arxiv),
              pdf: data.pdf,
              code: data.code,
              slides: data.slides,
              poster: data.poster,
            };

            return (
              <li class="rounded-2xl border border-white/10 bg-white/5 p-6 backdrop-blur shadow-sm">
                <h3 class="text-lg font-semibold leading-snug">
                  {data.title}
                </h3>

                <p class="mt-1 text-sm opacity-90">
                  {authorLine(data.authors)}
                  {data.venue ? ` ‚Äî ${data.venue}` : ''}
                  {data.type ? ` ¬∑ ${data.type}` : ''}
                  {data.year ? ` ¬∑ ${data.year}` : ''}
                </p>

                {data.abstract && (
                  <p class="mt-3 text-sm leading-6 opacity-90">{data.abstract}</p>
                )}

                <div class="mt-4 flex flex-wrap gap-2 text-xs">
                  {links.doi && <a href={links.doi} class="rounded-full border px-2.5 py-1">DOI</a>}
                  {links.arxiv && <a href={links.arxiv} class="rounded-full border px-2.5 py-1">arXiv</a>}
                  {links.pdf && <a href={links.pdf} class="rounded-full border px-2.5 py-1">PDF</a>}
                  {links.code && <a href={links.code} class="rounded-full border px-2.5 py-1">Code</a>}
                  {links.slides && <a href={links.slides} class="rounded-full border px-2.5 py-1">Slides</a>}
                  {links.poster && <a href={links.poster} class="rounded-full border px-2.5 py-1">Poster</a>}
                  {data.award && (
                    <span class="rounded-full border px-2.5 py-1">üèÖ {data.award}</span>
                  )}
                </div>

                {data.tags && data.tags.length > 0 && (
                  <div class="mt-3 flex flex-wrap gap-2 text-[11px] opacity-80">
                    {data.tags.map((t) => (
                      <span class="rounded-full border px-2 py-0.5">{t}</span>
                    ))}
                  </div>
                )}
              </li>
            );
          })}
        </ul>
      </section>
    ))}
  </section>
</PageLayout>

